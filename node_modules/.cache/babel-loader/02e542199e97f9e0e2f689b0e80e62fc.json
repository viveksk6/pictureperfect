{"ast":null,"code":"import _defineProperty from \"C:\\\\pictureperfect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MOVIES } from \"../constants\";\nimport movieData from \"../movieData.json\";\nconst initialState = {\n  movies: movieData\n};\n\nconst movieReducer = (state = initialState, action) => {\n  if (action.type === MOVIES.LOAD_SUCCESS) {\n    return [_objectSpread({}, state, {\n      movies: action.data\n    })];\n  }\n\n  return state;\n};\n\nexport default movieReducer;","map":{"version":3,"sources":["C:\\pictureperfect\\src\\reducers\\movieReducer.js"],"names":["MOVIES","movieData","initialState","movies","movieReducer","state","action","type","LOAD_SUCCESS","data"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAEF;AADW,CAArB;;AAIA,MAAMG,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACrD,MAAIA,MAAM,CAACC,IAAP,KAAgBP,MAAM,CAACQ,YAA3B,EAAyC;AACvC,WAAO,mBAAMH,KAAN;AAAaF,MAAAA,MAAM,EAAEG,MAAM,CAACG;AAA5B,OAAP;AACD;;AACD,SAAOJ,KAAP;AACD,CALD;;AAOA,eAAeD,YAAf","sourcesContent":["import { MOVIES } from \"../constants\";\r\nimport movieData from \"../movieData.json\";\r\n\r\nconst initialState = {\r\n  movies: movieData\r\n};\r\n\r\nconst movieReducer = (state = initialState, action) => {\r\n  if (action.type === MOVIES.LOAD_SUCCESS) {\r\n    return [{ ...state, movies: action.data }];\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default movieReducer;\r\n"]},"metadata":{},"sourceType":"module"}